import re
from typing import Optional, Tuple, Dict, Any
from dataclasses import dataclass

@dataclass
class ClockData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤"""
    time: str
    description: str
    raw_message: str

class MessageParser:
    """–ü–∞—Ä—Å–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞"""
    
    def __init__(self):
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        self.time_patterns = [
            r'(\d{1,2}):(\d{2}):(\d{2})',  # HH:MM:SS
            r'(\d{1,2}):(\d{2})',          # HH:MM
            r'(\d{1,2})\.(\d{2})\.(\d{2})', # HH.MM.SS
            r'(\d{1,2})\.(\d{2})',          # HH.MM
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —á–∞—Å–∞–º–∏
        self.clock_keywords = [
            '—á–∞—Å', '–≤—Ä–µ–º—è', '–º–∏–Ω—É—Ç', '—Å–µ–∫—É–Ω–¥', 
            '–¥–æ–≥–æ–≤–æ—Ä', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', '—Å–¥–µ–ª–∫–∞',
            '—Å—É–¥–Ω–æ–≥–æ', '–¥–æ', '–æ—Å—Ç–∞–µ—Ç—Å—è', '–æ—Å—Ç–∞–ª–æ—Å—å'
        ]
    
    def parse_message(self, message_text: str) -> Optional[ClockData]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–∞—Å–æ–≤
        
        Args:
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
            
        Returns:
            ClockData –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        """
        if not message_text:
            return None
            
        message_text = message_text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if not self._contains_clock_keywords(message_text.lower()):
            return None
        
        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        time = self._extract_time(message_text)
        if not time:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = self._extract_description(message_text, time)
        
        return ClockData(
            time=time,
            description=description,
            raw_message=message_text
        )
    
    def _contains_clock_keywords(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–∞—Å–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        return any(keyword in text for keyword in self.clock_keywords)
    
    def _extract_time(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        for pattern in self.time_patterns:
            match = re.search(pattern, text)
            if match:
                groups = match.groups()
                if len(groups) == 3:  # HH:MM:SS
                    return f"{int(groups[0]):02d}:{int(groups[1]):02d}:{int(groups[2]):02d}"
                elif len(groups) == 2:  # HH:MM
                    return f"{int(groups[0]):02d}:{int(groups[1]):02d}:00"
        
        return None
    
    def _extract_description(self, text: str, time_str: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
        text_without_time = re.sub(r'\d{1,2}[:.]\d{2}([:.]\d{2})?', '', text).strip()
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        text_without_time = re.sub(r'[üïê-üïß‚è∞‚è±‚è≤üîîüéØ‚ö°]', '', text_without_time)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text_without_time = re.sub(r'\s+', ' ', text_without_time).strip()
        
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        if not text_without_time or len(text_without_time) < 10:
            return "–í—Ä–µ–º—è –¥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–ø–æ—Ö–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"
        
        return text_without_time[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    def parse_multiple_formats(self, message_text: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–±—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        results = {
            'original_text': message_text,
            'has_keywords': self._contains_clock_keywords(message_text.lower()),
            'found_times': [],
            'parsed_data': None
        }
        
        # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        for pattern in self.time_patterns:
            matches = re.findall(pattern, message_text)
            for match in matches:
                results['found_times'].append({
                    'pattern': pattern,
                    'match': match,
                    'formatted': self._format_time_match(match)
                })
        
        # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        results['parsed_data'] = self.parse_message(message_text)
        
        return results
    
    def _format_time_match(self, match_groups: tuple) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        if len(match_groups) == 3:
            return f"{int(match_groups[0]):02d}:{int(match_groups[1]):02d}:{int(match_groups[2]):02d}"
        elif len(match_groups) == 2:
            return f"{int(match_groups[0]):02d}:{int(match_groups[1]):02d}:00"
        return str(match_groups)