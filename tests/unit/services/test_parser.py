"""Tests for the message parser module."""

import pytest

from app.services.parser import ClockData, MessageParser


@pytest.fixture
def parser():
    """Create a MessageParser instance."""
    return MessageParser()


@pytest.mark.parametrize(
    "message,expected_time,expected_in_description",
    [
        ("üïê 23:42 - –î–µ–¥–ª–∞–π–Ω –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è! –í—Ä–µ–º—è –¥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.", "23:42:00", "–î–µ–¥–ª–∞–π–Ω –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è"),
        ("‚è∞ 15:30:45 –¥–æ —Å—É–¥–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", "15:30:45", "–¥–æ —Å—É–¥–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è"),
        ("üîî 12.15 - –≤—Ä–µ–º—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è", "12:15:00", "–≤—Ä–µ–º—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"),
        ("‚ö° 09.25.30 —Å–µ–∫—É–Ω–¥ –¥–æ –¥–æ–≥–æ–≤–æ—Ä–∞", "09:25:30", "—Å–µ–∫—É–Ω–¥ –¥–æ –¥–æ–≥–æ–≤–æ—Ä–∞"),
    ],
)
def test_parse_message_time_patterns(parser, message, expected_time, expected_in_description):
    """Parse messages with different time formats and verify outputs."""
    # Arrange is done by parameters
    # Act
    result = parser.parse_message(message)
    # Assert
    assert result is not None
    assert result.time == expected_time
    assert expected_in_description in result.description
    assert result.raw_message == message


@pytest.mark.parametrize(
    "message",
    [
        "This is just a regular message with 12:30 but no relevant keywords",
    ],
)
def test_parse_message_no_keywords(parser, message):
    """Messages without keywords should not parse to ClockData."""
    assert parser.parse_message(message) is None


@pytest.mark.parametrize(
    "message",
    [
        "–í—Ä–µ–º—è –¥–æ–≥–æ–≤–æ—Ä–∞ —Å—É–¥–Ω–æ–≥–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç –∫–æ–≥–¥–∞",
    ],
)
def test_parse_message_no_time(parser, message):
    """Messages with keywords but without time should not parse."""
    assert parser.parse_message(message) is None


@pytest.mark.parametrize("message", ["", None, "   "])
def test_parse_message_empty_text(parser, message):
    """Empty or whitespace messages should return None."""
    assert parser.parse_message(message) is None


def test_parse_message_multiple_times(parser):
    """Test parsing message with multiple time formats."""
    message = "üïê 23:42 –∏ —Ç–∞–∫–∂–µ 15.30.45 - –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞"

    result = parser.parse_message(message)

    assert result is not None
    # Should extract the first found time
    assert result.time == "23:42:00"


@pytest.mark.parametrize(
    "text,expected",
    [
        ("–≤—Ä–µ–º—è –¥–æ –¥–æ–≥–æ–≤–æ—Ä–∞", True),
        ("—á–∞—Å—ã —Å—É–¥–Ω–æ–≥–æ –¥–Ω—è", True),
        ("–º–∏–Ω—É—Ç—ã –¥–æ —Å–¥–µ–ª–∫–∏", True),
        ("—Å–µ–∫—É–Ω–¥—ã –æ—Å—Ç–∞–µ—Ç—Å—è", True),
        ("–¥–æ–≥–æ–≤–æ—Ä —Å–æ–≥–ª–∞—à–µ–Ω–∏—è", True),  # "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ" is a keyword
        ("–ø—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", False),
        ("", False),
        ("–≤—Ä–µ–º—è", True),  # Single keyword should match
        ("–í–†–ï–ú–Ø –î–û–ì–û–í–û–†", True),  # Case insensitive
    ],
)
def test_contains_clock_keywords(parser, text, expected):
    assert parser._contains_clock_keywords(text.lower()) == expected


@pytest.mark.parametrize(
    "text,expected",
    [
        ("Current time is 14:25", "14:25:00"),
        ("Time: 09:05:30", "09:05:30"),
        ("Time is 7:45", "07:45:00"),
        ("Format 23.59", "23:59:00"),
        ("Format 12.34.56", "12:34:56"),
        ("No time here", None),
        ("Invalid 25:70", "25:70:00"),
        ("", None),
    ],
)
def test_extract_time_various_formats(parser, text, expected):
    assert parser._extract_time(text) == expected


@pytest.mark.parametrize(
    "message,expected_part",
    [
        ("üïê 23:42 - –î–µ–¥–ª–∞–π–Ω –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è!", "- –î–µ–¥–ª–∞–π–Ω –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è!"),
        ("‚è∞ 15:30 –≤—Ä–µ–º—è –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞—Å—Ç–∞–ª–æ", "–≤—Ä–µ–º—è –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞—Å—Ç–∞–ª–æ"),
        ("12.30 - —Å–¥–µ–ª–∫–∞ —Å—É–¥–Ω–æ–≥–æ –¥–Ω—è", "- —Å–¥–µ–ª–∫–∞ —Å—É–¥–Ω–æ–≥–æ –¥–Ω—è"),
        ("üîî 09:15:30 —Å–µ–∫—É–Ω–¥—ã –¥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è", "—Å–µ–∫—É–Ω–¥—ã –¥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"),
    ],
)
def test_extract_description_removes_time(parser, message, expected_part):
    result = parser._extract_description(message, "doesn't matter")
    assert expected_part in result
    # Should not contain a time pattern
    assert not any(ch.isdigit() and ":" in result for ch in result)


@pytest.mark.parametrize(
    "message,expected",
    [
        ("üïê 23:42", "–í—Ä–µ–º—è –¥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–ø–æ—Ö–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"),
        ("‚è∞ 15:30   ", "–í—Ä–µ–º—è –¥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–ø–æ—Ö–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"),
        ("12:30 - short", "–í—Ä–µ–º—è –¥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è —ç–ø–æ—Ö–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"),
    ],
)
def test_extract_description_default_fallback(parser, message, expected):
    assert parser._extract_description(message, "12:30") == expected


def test_extract_description_length_limit(parser):
    """Test description length limitation."""
    long_message = "üïê 12:30 " + "–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ " * 20
    result = parser._extract_description(long_message, "12:30")

    assert len(result) <= 200


def test_parse_multiple_formats_debug(parser):
    """Test debug parsing method."""
    message = "üïê 23:42 –∏ 15.30.45 - –≤—Ä–µ–º—è –¥–æ–≥–æ–≤–æ—Ä–∞"

    result = parser.parse_multiple_formats(message)

    assert result["original_text"] == message
    assert result["has_keywords"] is True
    assert len(result["found_times"]) >= 1  # Should find at least one time
    assert result["parsed_data"] is not None
    assert result["parsed_data"].time == "23:42:00"  # First match


def test_parse_multiple_formats_no_matches(parser):
    """Test debug parsing with no matches."""
    message = "Regular message without any time or keywords"

    result = parser.parse_multiple_formats(message)

    assert result["original_text"] == message
    assert result["has_keywords"] is False
    assert len(result["found_times"]) == 0
    assert result["parsed_data"] is None


def test_format_time_match(parser):
    """Test time formatting from regex matches."""
    # Test 2-group match (HH:MM)
    result = parser._format_time_match(("15", "30"))
    assert result == "15:30:00"

    # Test 3-group match (HH:MM:SS)
    result = parser._format_time_match(("09", "25", "45"))
    assert result == "09:25:45"

    # Test single digit formatting
    result = parser._format_time_match(("5", "7"))
    assert result == "05:07:00"

    # Test unexpected number of groups (fallback case)
    result = parser._format_time_match(("23",))
    assert result == "('23',)"


def test_clock_data_structure():
    """Test ClockData dataclass structure."""
    data = ClockData(time="12:30:00", description="Test description", raw_message="Original message")

    assert data.time == "12:30:00"
    assert data.description == "Test description"
    assert data.raw_message == "Original message"


def test_parser_keyword_patterns(parser):
    """Test that parser recognizes all expected keywords."""
    expected_keywords = [
        "—á–∞—Å",
        "–≤—Ä–µ–º—è",
        "–º–∏–Ω—É—Ç",
        "—Å–µ–∫—É–Ω–¥",
        "–¥–æ–≥–æ–≤–æ—Ä",
        "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
        "—Å–¥–µ–ª–∫–∞",
        "—Å—É–¥–Ω–æ–≥–æ",
        "–¥–æ",
        "–æ—Å—Ç–∞–µ—Ç—Å—è",
        "–æ—Å—Ç–∞–ª–æ—Å—å",
    ]

    assert set(parser.clock_keywords) == set(expected_keywords)


def test_parser_time_patterns(parser):
    """Test that parser has expected time patterns."""
    expected_patterns = [
        r"(\d{1,2}):(\d{2}):(\d{2})",  # HH:MM:SS
        r"(\d{1,2}):(\d{2})",  # HH:MM
        r"(\d{1,2})\.(\d{2})\.(\d{2})",  # HH.MM.SS
        r"(\d{1,2})\.(\d{2})",  # HH.MM
    ]

    assert parser.time_patterns == expected_patterns
