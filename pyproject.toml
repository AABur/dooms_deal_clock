[project]
name = "dooms-deal-clock"
version = "0.1.0"
description = "Web application for displaying Dooms Deal Clock updates from Telegram channel"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "telethon>=1.34.0",
    "python-dotenv>=1.0.0",
    "sqlalchemy>=2.0.23",
    "aiofiles>=23.2.1",
    "httpx>=0.25.2",
    "pydantic>=2.5.0",
    "loguru>=0.7.3",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.15.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
    "pytest-sugar>=1.0.0",
    "httpx>=0.25.2",
    "ruff>=0.11.2",
    "wemake-python-styleguide>=1.1.0",
    "pytest-playwright>=0.6.2",
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["app"]


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = ["Test*"]
python_functions = ["test_*"]

# Configure asyncio mode for better handling of async tests
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Test logging configuration
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Minimum pytest version required
minversion = "8.3.0"

# Improve test execution and reporting
addopts = [
    "--strict-markers",
    "--strict-config",
    "--no-header",
    "--tb=short",
    "--showlocals",
    "--doctest-modules",
    "-ra",
    "--durations=5",
    "-nauto",
    "--dist=loadgroup",
]

# Define markers for better organization
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests for quick validation",
    "ui: marks end-to-end UI tests (Playwright)",
]

# Cache setup for improved test performance
cache_dir = ".pytest_cache"

[tool.coverage.run]
source = ["app"]
omit = ["*/__init__.py", "*/tests/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "except ImportError:",
]
precision = 2
show_missing = true
fail_under = 85

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true

# Ignore missing stubs for third-party libraries
[[tool.mypy.overrides]]
module = "telethon.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff]
preview = true
fix = true
target-version = "py311"
line-length = 120

[tool.ruff.format]
quote-style = "double"
docstring-code-format = false

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "F", # pyflakes
    "B", # flake8-bugbear
    "W", # pycodestyle warnings
    "I", # isort
]
external = ["WPS"]
ignore = [
    "B008", # FastAPI: Depends in parameter defaults is intentional
]

exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
]

[tool.ruff.lint.isort]
known-first-party = ["app"]
